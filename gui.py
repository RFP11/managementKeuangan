
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import tkinter as tk
from tkinter import ttk
from pathlib import Path
import sqlite3 
import datetime
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
# function section

# connection DB
con = sqlite3.connect('keuangan.db')
cursor = con.cursor()

# teble check
cursor.execute('create table if not exists user (id integer primary key autoincrement, username text not null, keuangan integer not null)')
con.commit()
cursor.execute("insert or ignore into user (id, username, keuangan) values (1, 'user', 0)")
con.commit()
cursor.execute('create table if not exists histori (id integer primary key autoincrement, konteks text not null,method text not null, hari text not null, jumlah integer not null, tanggal date not null)')
con.commit()
cursor.execute('create table if not exists graph (id integer primary key autoincrement, jumlah integer not null, tanggal date not null )')
graph_len = cursor.execute('select * from graph').fetchall()

# end of checking Tables 

text_ids = {}
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\code\sqlite\keuangan\assets\frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# set dayname in ID
today = datetime.datetime.today()
yesterday = today.date() - datetime.timedelta(days=1)
day_name = today.strftime('%A')
day_names = {
    'Monday': 'Senin',
    'Tuesday': 'Selasa',
    'Wednesday': 'Rabu',
    'Thursday': 'Kamis',
    'Friday': 'Jumat',
    'Saturday': 'Sabtu',
    'Sunday': 'Minggu'
}
day_name_id = day_names.get(day_name, 'Unknown')

# graph
fig = Figure(figsize=(5, 5), dpi=100)
ax = fig.add_subplot(111)

query = cursor.execute("SELECT jumlah, tanggal FROM graph").fetchall()
print(query)
jumlah_data = [data[0] for data in query]
tanggal_data = [data[1] for data in query]
ax.plot(tanggal_data, jumlah_data)

# cek if there is no fields at graph table
if len(graph_len) <= 0:
    sql = 'insert into graph (jumlah, tanggal) values (0, ?)'
    cursor.execute(sql, (yesterday,))
    con.commit()



todays_date = today.date()
one_week = today.date() - datetime.timedelta(days=7)
one_week_str = one_week.strftime('%d-%m-%Y')

query = "DELETE FROM histori WHERE tanggal = ?"
cursor.execute(query, (one_week_str,))
con.commit()
# execute the query
query = cursor.execute("SELECT jumlah, tanggal FROM graph").fetchall()
print(query)
jumlah = [data[0] for data in query]
tanggal = [data[1] for data in query]
ax.plot(tanggal, jumlah)

    

window = Tk()

window.geometry("525x535")
window.configure(bg = "#2C3333")


canvas = Canvas(
    window,
    bg = "#2C3333",
    height = 535,
    width = 525,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_text(
    128.0,
    24.0,
    anchor="nw",
    text="Management Keuangan",
    fill="#E7F6F2",
    font=("Inter", 24 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    262.0,
    138.0,
    image=image_image_1
)

canvas.create_text(
    81.0,
    95.0,
    anchor="nw",
    text="Keuangan",
    fill="#E7F6F2",
    font=("Inter", 20 * -1)
)

def saldo_text_home(saldo = None):
    if saldo is None:
        cursor.execute('select keuangan from user where id = 1')
        saldo = cursor.fetchone()[0]

    text_ids['saldo'] = canvas.create_text(
    56.0,
    124.0,
    anchor="nw",
    text="Rp. " + str(saldo),
    fill="#E7F6F2",
    font=("Inter", 32 * -1)
)
saldo_text_home()
treeview = ttk.Treeview(
    window,
    )
treeview['column'] = ('konteks', 'method', 'hari', 'jumlah', 'tanggal')
treeview.heading(
    '#0', 
    text=''
)
treeview.heading(
    'konteks', 
    text='Konteks'
)
treeview.heading(
    'method', 
    text='Method'
)
treeview.heading(
    'hari', 
    text='Hari'
)
treeview.heading(
    'jumlah', 
    text='Jumlah'
)
treeview.heading(
    'tanggal', 
    text='Tanggal'
)
treeview.column(
    '#0', 
    width=0, 
    stretch=tk.NO
)
treeview.column(
    'konteks', 
    width=110, 
    stretch=tk.NO
)
treeview.column(
    'method', 
    width=100, 
    stretch=tk.NO
)
treeview.column(
    'hari', 
    width=80, 
    stretch=tk.NO
)
treeview.column(
    'jumlah', 
    width=90, 
    stretch=tk.NO
)
treeview.column(
    'tanggal', 
    width=100, 
    stretch=tk.NO
)
treeview.place(
    x=20, 
    y=230, 
    width=485, 
    height=200
)
data = cursor.execute('select konteks, method, hari, jumlah, tanggal from histori order by tanggal').fetchall()
treeview.delete(*treeview.get_children())
treeview.tag_configure("Treeview",background='#395B64')
print(data)
for row in data:
    treeview.insert("", tk.END, text="", values = row)

def tambahSaldoFrame():
    frame_root = tk.Toplevel()
    frame_root.title("Tambah Saldo")
    frame_root.geometry("400x400")
    frame_root.resizable(False, False)

    canvas_tambah = Canvas(
        frame_root,
        bg = "#2C3333",
        height = 400,
        width = 400,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"

    )
    canvas_tambah.place(x = 0, y = 0)
    canvas_tambah.create_text(
    128.0,
    24.0,
    anchor="nw",
    text="Tambah Saldo",
    fill="#E7F6F2",
    font=("Inter", 24 * -1)
    )

    canvas_tambah.create_text(
    15.0,
    80.0,
    anchor="nw",
    text="Masukan jumlah TopUp",
    fill="#E7F6F2",
    font=("Inter", 14 * -1)
    )

    jumlah_masuk = tk.IntVar()
    entry_jumlah = Entry(frame_root,textvariable=jumlah_masuk ,width=60)
    entry_jumlah.configure(background='#395B64', fg="#E7F6F2")
    entry_jumlah.place(
        x= 15.0,
        y=100
    )
    button_image_5 = PhotoImage(
    file=relative_to_assets("tambah.png"))

    def tambahSaldo():
        sql = 'update user set keuangan = ? where id= 1'
        histori = "insert into histori (konteks,method, hari, jumlah, tanggal) values (?,?,?,?,?)"
        sql_graph = 'insert into graph (jumlah, tanggal) values (?, ?)'
        sql_graph_exception = 'update graph set jumlah = ? where tanggal = ?'
        cek_graph = 'select * from graph where tanggal = ?'
        try:
            masuk = int(entry_jumlah.get())
            if masuk <= 100:
                raise ValueError("Invalid Rupiah Expected")
        except ValueError:
            frame_root.destroy()
            tk.messagebox.showerror(
                title="Invalid Input Type", message="Please Enter Valid Number"
            )
            return
        print(type(masuk))
        uang_saat_ini = cursor.execute('select keuangan from user where id = 1').fetchone()[0]
        print(type(uang_saat_ini))
        tambah = int(uang_saat_ini + masuk)
        todays = today.date()
        date_string = todays.strftime('%d-%m-%Y')
        values = ('Isi Saldo', 'Tambah', day_name_id, masuk, date_string)
        graph_val = (tambah, todays)
        print(values)
        try:
            cursor.execute(sql, (tambah,))
            cursor.execute(histori, values)
            graph = cursor.execute(cek_graph, (todays,)).fetchall()
            if len(graph) >= 1:
                cursor.execute(sql_graph_exception, graph_val)
                con.commit()
            else:
                cursor.execute(sql_graph, graph_val)
                con.commit()
            data = cursor.execute('select konteks, method, hari, jumlah, tanggal from histori order by tanggal').fetchall()
            treeview.delete(*treeview.get_children())
            print(data)
            for row in data:
                treeview.insert("", tk.END, text="", values = row)
            frame_root.destroy()
            canvas.delete(text_ids['saldo'])
            saldo = cursor.execute('select keuangan from user where id=1').fetchone()[0]
            saldo_text_home(saldo)
            tk.messagebox.showinfo(
                "Success", f"Saldo berhasil ditambahkan sebesar {masuk}"
            )
        except sqlite3.Error as err:
            frame_root.destroy()
            tk.messagebox.showerror(
                title="Failed Insert Data",
                message=f"{err} Expected"
            )
            print(err)
            con.rollback()
            return
    button_5 = tk.Button(
    frame_root,
    borderwidth=0,
    highlightthickness=0,
    command=tambahSaldo,
    relief="flat"
)
    button_5.image = button_image_5  # Store the image as an attribute
    button_5.config(image=button_image_5)
    button_5.place(
    x=110.0,
    y=145.0,
    width=190.0,
    height=44.0
)

def pengeluaranFrame():
    frame_pengeluaran = tk.Toplevel()
    frame_pengeluaran.title('Pengeluaran')
    frame_pengeluaran.geometry("400x400")
    frame_pengeluaran.resizable(False, False)

    canvas_pengeluaran = Canvas(
    frame_pengeluaran,
    bg = "#2C3333",
    height = 400,
    width = 400,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
    )
    canvas_pengeluaran.place(x = 0, y = 0)

    canvas_pengeluaran.create_text(
    128.0,
    24.0,
    anchor="nw",
    text="Pengeluaran",
    fill="#E7F6F2",
    font=("Inter", 24 * -1)
    )

    canvas_pengeluaran.create_text(
    15.0,
    80.0,
    anchor="nw",
    text="Masukan pengeluaran untuk hari ini",
    fill="#E7F6F2",
    font=("Inter", 14 * -1)
    )

    pengeluaran_var = tk.IntVar()
    entry_jumlah = Entry(frame_pengeluaran,textvariable=pengeluaran_var ,width=60)
    entry_jumlah.configure(background='#395B64', fg="#E7F6F2")
    entry_jumlah.place(
        x= 15.0,
        y=100
    )
    canvas_pengeluaran.create_text(
    15.0,
    130.0,
    anchor="nw",
    text="Masukan Konteks Pengeluaran",
    fill="#E7F6F2",
    font=("Inter", 14 * -1)
    )

    konteks_var = tk.StringVar()
    entry_konteks = Entry(frame_pengeluaran,textvariable=konteks_var ,width=60)
    entry_konteks.configure(background='#395B64', fg="#E7F6F2")
    entry_konteks.place(
        x= 15.0,
        y=150
    )
    button_image_5_submit = PhotoImage(
    file=relative_to_assets("keluar.png"))

    def pengeluaran():
        konteks = konteks_var.get()
        sql = 'update user set keuangan = ? where id= 1'
        histori = "insert into histori (konteks,method, hari, jumlah, tanggal) values (?,?,?,?,?)"
        sql_graph = 'insert into graph (jumlah, tanggal) values (?, ?)'
        sql_graph_exception = 'update graph set jumlah = ? where tanggal = ?'
        cek_graph = 'select * from graph where tanggal = ?'
        try:
            masuk_pengeluaran = int(pengeluaran_var.get())
            if len(konteks) <= 0:
                raise ValueError("Null Expected")
            if masuk_pengeluaran <= 0:
                raise ValueError("Invalid Rupiah Expected")
        except:
            frame_pengeluaran.destroy()
            if len(konteks) <= 0:
                tk.messagebox.showerror(
                title="Invalid Input", message="NULL Expected"
            )
                return
            if masuk_pengeluaran < 100:
                tk.messagebox.showerror(
                title="Invalid Input", message="Please Enter A Number At Least 100 or More"
            )
                return
            tk.messagebox.showerror(
                title="Invalid Input", message="Please Enter Valid Number"
            )
            return
        
        print(masuk_pengeluaran)
        masuk_pengeluaran_negatif = masuk_pengeluaran * -1
        print(konteks)
        uang_saat_ini = cursor.execute('select keuangan from user where id = 1').fetchone()[0]
        print(type(uang_saat_ini))
        pengeluaran_akhir = int(uang_saat_ini - masuk_pengeluaran)
        
        todays = today.date()
        date_string = todays.strftime('%d-%m-%Y')
        values = (konteks, 'Keluar', day_name_id, masuk_pengeluaran_negatif, date_string)
        graph_val = (pengeluaran_akhir, todays)
        try:
            cursor.execute(sql, (pengeluaran_akhir,))
            cursor.execute(histori, values)
            graph = cursor.execute(cek_graph, (todays,)).fetchall()
            if len(graph) >= 1:
                cursor.execute(sql_graph_exception, graph_val)
                con.commit()
            else:
                cursor.execute(sql_graph, graph_val)
                con.commit()
            con.commit()
            data = cursor.execute('select konteks, method, hari, jumlah, tanggal from histori').fetchall()
            treeview.delete(*treeview.get_children())
            print(data)
            for row in data:
                treeview.insert("", tk.END, text="", values = row)
            frame_pengeluaran.destroy()
            canvas.delete(text_ids['saldo'])
            saldo = cursor.execute('select keuangan from user where id=1').fetchone()[0]
            saldo_text_home(saldo)
            tk.messagebox.showinfo(
                "Success", f"Pengeluaran berhasil tercatat sebesar {masuk_pengeluaran}"
            )
        except sqlite3.Error as err:
            tk.messagebox.showerror(
                title="Failed To Upload", message=f'Failed to To Insert {err} Expected'
            )
            con.rollback()
            return
            


    button_submit = tk.Button(
        frame_pengeluaran,
        borderwidth=0,
        highlightthickness=0,
        command= pengeluaran,
        relief="flat"
    )

    button_submit.image = button_image_5_submit
    button_submit.configure(image=button_image_5_submit)
    button_submit.place(
    x=50.0,
    y=190.0,
    width=300.0,
    height=50.0
)



button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command= pengeluaranFrame,
    relief="flat"
)
button_1.place(
    x=341.0,
    y=114.0,
    width=49.0,
    height=49.0
)

def chart():
    frame_chart = tk.Toplevel()
    frame_chart.title('Graph')
    frame_chart.geometry("525x535")
    frame_chart.resizable(False, False)

    # execute the query
    query = cursor.execute("SELECT jumlah, tanggal FROM graph").fetchall()
    print(query)
    jumlah_data = [data[0] for data in query]
    tanggal_data = [data[1] for data in query]
    ax.plot(tanggal_data, jumlah_data)

    canvas_chart = Canvas(
    frame_chart,
    height = 535,
    width = 525,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
    )
    canvas_chart.place(x = 0, y = 0)

    canvas_plot = FigureCanvasTkAgg(fig, master=canvas_chart,)
    canvas_plot.draw()
    canvas_plot.get_tk_widget().place(x=0, y=0)


button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command= chart,
    relief="flat"
)
button_2.place(
    x=411.0,
    y=114.0,
    width=49.0,
    height=49.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command= tambahSaldoFrame,
    relief="flat"
)
button_3.place(
    x=271.0,
    y=114.0,
    width=49.0,
    height=49.0
)

canvas.create_text(
    30.0,
    200.0,
    anchor="nw",
    text="Histori",
    fill="#E7F6F2",
    font=("Inter", 20 * -1)
)




window.resizable(False, False)
window.mainloop()
